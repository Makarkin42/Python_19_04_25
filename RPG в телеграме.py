import telebot
from telebot.types import (Message, ReplyKeyboardMarkup, ReplyKeyboardRemove,
                           InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery)
from config import TOKEN
import random
import s_taper
from s_taper.consts import *
scheme = {"user_id": INT+KEY, "nick": TEXT, "race": TEXT, "hp": INT, "dmg": INT, "armor": INT,"money": INT, "max": INT}
users = s_taper.Taper("users", "rpg.db").create_table(scheme)
bot = telebot.TeleBot(TOKEN)
races = ["–ó–æ–º–±–∏", "–†–æ–±–æ—Ç", "–ß–µ–ª–æ–≤–µ–∫"]
enemies = {"–û–≥—Ä": (150, 9), "–ö—Ä—ã—Å–∞": (60, 15), "–¢–∏—Ç–∞–Ω": (200, 7),
           "–ú—É—Ç–∞–Ω—Ç": (90, 13), "–ö–∏–±–æ—Ä–≥": (120, 11)}
alls = {}
choose = InlineKeyboardMarkup()
choose.row(InlineKeyboardButton("–ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data="forest –ê—Ç–∞–∫–∞"),
           InlineKeyboardButton("–£–±–µ–∂–∞—Ç—å", callback_data="forest –ü–æ–±–µ–≥"))
townb = InlineKeyboardMarkup()
townb.row(InlineKeyboardButton("–¢–∞–≤–µ—Ä–Ω–∞", callback_data="town –¢–∞–≤–µ—Ä–Ω–∞"),
                     InlineKeyboardButton("–õ–∞–≤–∫–∞", callback_data="town –õ–∞–≤–∫–∞"))
townb.row(InlineKeyboardButton("–ú–æ–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏", callback_data="town –ü–æ–∫–∞–∑"))
battles = {}

@bot.message_handler(commands=["start"])
def handler(message: Message):
    alls[message.from_user.id] = [message.from_user.id]
    bot.send_message(chat_id=message.chat.id, text=f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!"
                                                f" –ö–∞–∫ –±—É–¥—É—Ç –∑–≤–∞—Ç—å —Ç–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞?")
    bot.register_next_step_handler(message,register1)

def register1(message: Message):
    name = message.text
    print(name)
    alls[message.from_user.id].append(name)
    keyb = ReplyKeyboardMarkup(resize_keyboard=True,one_time_keyboard=True)
    keyb.row(*races)
    bot.send_message(chat_id=message.chat.id, text="–ö–∞–∫–æ–π —Ä–∞—Å—ã —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂?", reply_markup=keyb)
    bot.register_next_step_handler(message, register2)

def register2(message: Message):
    race = message.text.capitalize()
    print(race)
    if race in races:
        alls[message.from_user.id].append(race)
        battles[message.from_user.id] = []
        if race == "–ß–µ–ª–æ–≤–µ–∫":
            users.write(alls[message.from_user.id] + [100, 15, 2, 30, 100])
        if race == "–ó–æ–º–±–∏":
            users.write(alls[message.from_user.id]+[100, 20, 0, 10, 100])
        if race == "–†–æ–±–æ—Ç":
            users.write(alls[message.from_user.id] + [100, 10, 5, 10, 100])
        bot.send_message(chat_id=message.chat.id, text = "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!", reply_markup=ReplyKeyboardRemove())
        bot.send_message(chat_id=message.chat.id, text="–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ø–∞—Å—Ç—å –≤ –¢—ë–º–Ω—ã–π –ª–µ—Å - —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π"
                                                       " /forest, –∞ –µ—Å–ª–∏ –≤ –ì–æ—Ä–æ–¥–æ–∫ —Ç–æ—Ä–≥–æ–≤—Ü–µ–≤ - /town")
    else:
        bot.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–∏ —Ä–∞—Å—É –∏–∑ —Å–ø–∏—Å–∫–∞!")
        bot.register_next_step_handler(message, register2)

@bot.message_handler(commands=["forest"])
def handler(message: Message):
    userid = message.from_user.id
    if userid not in battles or not battles[userid]:
        bot.send_message(chat_id=message.chat.id, text="–¢—ã –ø–æ–ø–∞–ª –≤ –¢—ë–º–Ω—ã–π –ª–µ—Å! –ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å —Å—Ä–∞–∂–∞—Ç—å—Å—è —Å —Ä–∞–∑–Ω—ã–º–∏"
                                                       " –≤—Ä–∞–≥–∞–º–∏ –∏ –±–æ—Å—Å–∞–º–∏, –∞ —Ç–∞–∫–∂–µ –ø–æ–¥–∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–Ω–µ–≥!")
        victim = random.choice(tuple(enemies))
        hp, dmg = enemies[victim]
        battles[message.from_user.id] = [victim, hp, dmg]
        bot.send_message(chat_id=message.chat.id, text=f"–ù–∞ —Ç–µ–±—è –Ω–∞–ø–∞–ª {victim}! –£ –Ω–µ–≥–æ {hp}‚ù§ –∏ {dmg}‚öî",
                         reply_markup=choose)

@bot.callback_query_handler(func=lambda call:call.data.startswith("forest"))
def callback(call: CallbackQuery):
    player = users.read("user_id", call.from_user.id)
    print(call.data)
    action = call.data.split()[1]
    text = call.message.text.split("\n")[0]
    if action == "–ê—Ç–∞–∫–∞":
        battles[call.from_user.id][1] -= player[4]
        text += f"\n\n–¢—ã —É–¥–∞—Ä–∏–ª –≤—Ä–∞–≥–∞! –£ –Ω–µ–≥–æ –æ—Å—Ç–∞–ª–æ—Å—å {battles[call.from_user.id][1]}üñ§"
        bot.edit_message_text(text, chat_id=call.message.chat.id, message_id=call.message.id, reply_markup=choose)
        if battles[call.from_user.id][1] >= 1:
            player[3] -= battles[call.from_user.id][2] - player[5]
            text += f"\n–í—Ä–∞–≥ —É–¥–∞—Ä–∏–ª —Ç–µ–±—è! –£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å {player[3]}‚ù§"
            bot.edit_message_text(text, chat_id=call.message.chat.id, message_id=call.message.id, reply_markup=choose)
            if player[3] <= 0:
                bot.send_message(chat_id=call.message.chat.id, text=f"{player[1]} –ø–æ–≥–∏–± –≤ —ç—Ç–æ–º –±–æ—é! /start –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã")
                bot.edit_message_text(text, chat_id=call.message.chat.id, message_id=call.message.id)
        else:
            prize = random.randint(12, 38)
            bot.edit_message_text(chat_id=call.message.chat.id, text=text+f"\n\n–í—Ä–∞–≥ –ø–æ–±–µ–∂–¥—ë–Ω!\n –í –µ–≥–æ –∫–∞—Ä–º–∞–Ω–∞—Ö –æ–∫–∞–∑–∞–ª–æ—Å—å"
                                                                f" {prize} –º–æ–Ω–µ—Ç!\n/town –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥\n"
                                                                          f"/forest –¥–ª—è –Ω–æ–≤–æ–π –±–∏—Ç–≤—ã", message_id=call.message.id)
            player[6] += prize
            battles[call.from_user.id].clear()
    elif action == "–ü–æ–±–µ–≥":
        luck = random.random()
        if luck >= 0.70:
            bot.edit_message_text(text=text + "\n\n–ü–æ–±–µ–≥ —É–¥–∞–ª—Å—è! /town –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥ \n/forest –¥–ª—è –Ω–æ–≤–æ–π –±–∏—Ç–≤—ã", chat_id=call.message.chat.id,
                                  message_id=call.message.id)
            battles[call.from_user.id].clear()
        else:
            text += "\n\n–ü–æ–±–µ–≥ –Ω–µ —É–¥–∞–ª—Å—è!"
            bot.edit_message_text(text,chat_id=call.message.chat.id,
                                 message_id=call.message.id, reply_markup=choose)
            player[3] -= battles[call.from_user.id][2] - player[5]
            text += f"\n–í—Ä–∞–≥ —É–¥–∞—Ä–∏–ª —Ç–µ–±—è! –£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å {player[3]}‚ù§"
            bot.edit_message_text(text, chat_id=call.message.chat.id, message_id=call.message.id, reply_markup=choose)
    users.write(player)

@bot.callback_query_handler(func=lambda call:call.data.startswith("town"))
def callback(call: CallbackQuery):
    player = users.read("user_id", call.from_user.id)
    action = call.data.split()[1]
    if action == "–¢–∞–≤–µ—Ä–Ω–∞":
        keyb = InlineKeyboardMarkup()
        keyb.row(InlineKeyboardButton("–ü–µ—Ä–µ–∫—É—Å (5¬©, 25‚ù§)", callback_data="–¢–∞–≤–µ—Ä–Ω–∞ –ø–µ—Ä–µ–∫—É—Å 5 30"))
        keyb.row(InlineKeyboardButton("–õ–µ–∫–∞—Ä—Å—Ç–≤–æ (18¬©, 100‚ù§)", callback_data="–¢–∞–≤–µ—Ä–Ω–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ 18 100"))
        keyb.row(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–æ—Ä–æ–¥", callback_data="–¢–∞–≤–µ—Ä–Ω–∞ –Ω–∞–∑–∞–¥ 0 0"))
        bot.edit_message_text(text="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –≤ —Ç–∞–≤–µ—Ä–Ω–µ! –¢—É—Ç —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–¥–ª–µ—á–∏—Ç—å—Å—è –∏ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –æ—Ç –±–æ—ë–≤",
                              chat_id=call.message.chat.id, message_id=call.message.id, reply_markup=keyb)
    if action == "–õ–∞–≤–∫–∞":
        keyb = InlineKeyboardMarkup()
        keyb.row(InlineKeyboardButton("+20 –∑–¥–æ—Ä–æ–≤—å—è (25¬©)", callback_data="–õ–∞–≤–∫–∞ –∑–¥–æ—Ä–æ–≤—å–µ 20 20"))
        keyb.row(InlineKeyboardButton("+2 —É—Ä–æ–Ω–∞ (25¬©)", callback_data="–õ–∞–≤–∫–∞ —É—Ä–æ–Ω 25 2"))
        keyb.row(InlineKeyboardButton("+1 –±—Ä–æ–Ω—è (40¬©)", callback_data="–õ–∞–≤–∫–∞ –±—Ä–æ–Ω—è 40 1"))
        keyb.row(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–æ—Ä–æ–¥", callback_data="–õ–∞–≤–∫–∞ –Ω–∞–∑–∞–¥ 0 0"))
        bot.edit_message_text(text="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –≤ –ª–∞–≤–∫–µ! –¢—É—Ç —Ç—ã —Å–º–æ–∂–µ—à—å –ø—Ä–æ–∫–∞—á–∞—Ç—å —Å–≤–æ–∏ –±–æ–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã",
                              chat_id=call.message.chat.id, message_id=call.message.id, reply_markup=keyb)
    if action == "–ü–æ–∫–∞–∑":
        keyb = InlineKeyboardMarkup()
        keyb.row(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–æ—Ä–æ–¥", callback_data="–õ–∞–≤–∫–∞ –Ω–∞–∑–∞–¥ 0 0"))
        bot.edit_message_text(text=f"–¢–µ–∫—É—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ: {player[3]}\n"
                                   f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ: {player[7]}\n–£—Ä–æ–Ω: {player[4]}\n–ë—Ä–æ–Ω—è: {player[5]}\n"
                                   f"–î–µ–Ω—å–≥–∏: {player[6]}", chat_id=call.message.chat.id,
                              message_id=call.message.id, reply_markup=keyb)

@bot.callback_query_handler(func=lambda call:call.data.startswith("–¢–∞–≤–µ—Ä–Ω–∞"))
def taver(call: CallbackQuery):
    player = users.read("user_id", call.from_user.id)
    tag, price, res = call.data.split()[1:]
    price = int(price)
    res = int(res)
    if price == 0:
        bot.edit_message_text(text="–¢—ã –ø–æ–ø–∞–ª –≤ –ì–æ—Ä–æ–¥–æ–∫ —Ç–æ—Ä–≥–æ–≤—Ü–µ–≤! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –ø–æ—Å–ª–µ"
                                   " –±–∏—Ç–≤—ã, –≤–æ—Å–ø–æ–ª–Ω–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ –∏ —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏!\n"
                                   "–ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤ –∫–æ –≤—Å—Ç—Ä–µ—á–µ —Å –≤—Ä–∞–≥–æ–º - –∂–º–∏ /forest", chat_id=call.message.chat.id,
                              message_id=call.message.id, reply_markup=townb)
    elif player[6] >= price:
        player[6] -= price
        player[3] += res
        keyb = call.message.reply_markup
        bot.edit_message_text(text=f"–¢—ã –∫—É–ø–∏–ª {tag}! –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {player[6]} –¥–µ–Ω–µ–≥ –∏ {player[3]} –∑–¥–æ—Ä–æ–≤—å—è!",
                              chat_id=call.message.chat.id, message_id=call.message.id, reply_markup=keyb)
    else:
        bot.answer_callback_query(call.id,text="–°–ª–∏—à–∫–æ–º –º–∞–ª–æ –¥–µ–Ω–µ–≥!")
    users.write(player)

@bot.callback_query_handler(func=lambda call:call.data.startswith("–õ–∞–≤–∫–∞"))
def upd(call: CallbackQuery):
    player = users.read("user_id", call.from_user.id)
    tag, price, res = call.data.split()[1:]
    price = int(price)
    res = int(res)
    if price == 0:
        bot.edit_message_text(text="–¢—ã –ø–æ–ø–∞–ª –≤ –ì–æ—Ä–æ–¥–æ–∫ —Ç–æ—Ä–≥–æ–≤—Ü–µ–≤! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –ø–æ—Å–ª–µ"
                                " –±–∏—Ç–≤—ã, –≤–æ—Å–ø–æ–ª–Ω–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ –∏ —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏!\n"
                        "–ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤ –∫–æ –≤—Å—Ç—Ä–µ—á–µ —Å –≤—Ä–∞–≥–æ–º - –∂–º–∏ /forest",chat_id=call.message.chat.id, message_id=call.message.id, reply_markup=townb)
    elif price <= player[6]:
        keyb = call.message.reply_markup
        player[6] -= price
        if tag == "–∑–¥–æ—Ä–æ–≤—å–µ":
            player[7] += res
            bot.edit_message_text(text=f"–¢—ã –∫—É–ø–∏–ª {tag}! –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {player[6]} –¥–µ–Ω–µ–≥ –∏ {player[7]} "
                                       f"–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è!",
                                  chat_id=call.message.chat.id, message_id=call.message.id, reply_markup=keyb)
        elif tag == "—É—Ä–æ–Ω":
            player[4] += res
            bot.edit_message_text(text=f"–¢—ã –∫—É–ø–∏–ª {tag}! –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {player[6]} –¥–µ–Ω–µ–≥ –∏ {player[4]} —É—Ä–æ–Ω–∞!",
                                  chat_id=call.message.chat.id, message_id=call.message.id, reply_markup=keyb)
        elif tag == "–±—Ä–æ–Ω—è":
            player[5] += res
            bot.edit_message_text(text=f"–¢—ã –∫—É–ø–∏–ª {tag}! –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {player[6]} –¥–µ–Ω–µ–≥ –∏ {player[5]} –±—Ä–æ–Ω–∏!",
                                  chat_id=call.message.chat.id, message_id=call.message.id, reply_markup=keyb)
    else:
        bot.answer_callback_query(call.id, text="–°–ª–∏—à–∫–æ–º –º–∞–ª–æ –¥–µ–Ω–µ–≥!")
    users.write(player)

@bot.message_handler(commands=["town"])
def town(message: Message):
    userid = message.from_user.id
    if userid not in battles or not battles[userid]:
        player = users.read("user_id",userid)
        print(player)
        if player and player[3] > 0:
            bot.send_message(chat_id=message.chat.id, text="–¢—ã –ø–æ–ø–∞–ª –≤ –ì–æ—Ä–æ–¥–æ–∫ —Ç–æ—Ä–≥–æ–≤—Ü–µ–≤! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –ø–æ—Å–ª–µ"
                                                       " –±–∏—Ç–≤—ã, –≤–æ—Å–ø–æ–ª–Ω–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ –∏ —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏!\n"
                                                           "–ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤ –∫–æ –≤—Å—Ç—Ä–µ—á–µ —Å –≤—Ä–∞–≥–æ–º - –∂–º–∏ /forest",
                             reply_markup=townb)

@bot.message_handler(content_types=["text", "sticker"])
def handler(message: Message):
    emo = random.choice(["ü§°", "ü§ë", "üèÄ", "üòé", "ü•µ","üë∂üèø"])
    print(message)
    bot.send_message(chat_id=message.chat.id, text="–î–∞–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç!!!")
    bot.send_message(chat_id=message.chat.id, text=f"{emo}")

bot.infinity_polling()
#Content types: 'audio', 'photo', 'voice', 'video', 'document', 'text', 'location', 'contact', 'sticker'